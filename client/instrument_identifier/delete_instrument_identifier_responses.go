// Code generated by go-swagger; DO NOT EDIT.

package instrument_identifier

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DeleteInstrumentIdentifierReader is a Reader for the DeleteInstrumentIdentifier structure.
type DeleteInstrumentIdentifierReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteInstrumentIdentifierReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteInstrumentIdentifierNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewDeleteInstrumentIdentifierForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteInstrumentIdentifierNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewDeleteInstrumentIdentifierConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 410:
		result := NewDeleteInstrumentIdentifierGone()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 424:
		result := NewDeleteInstrumentIdentifierFailedDependency()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteInstrumentIdentifierInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /tms/v1/instrumentidentifiers/{tokenId}] deleteInstrumentIdentifier", response, response.Code())
	}
}

// NewDeleteInstrumentIdentifierNoContent creates a DeleteInstrumentIdentifierNoContent with default headers values
func NewDeleteInstrumentIdentifierNoContent() *DeleteInstrumentIdentifierNoContent {
	return &DeleteInstrumentIdentifierNoContent{}
}

/*
DeleteInstrumentIdentifierNoContent describes a response with status code 204, with default header values.

An existing Instrument Identifier associated with the supplied `tokenId` has been deleted.
*/
type DeleteInstrumentIdentifierNoContent struct {

	/* A globally unique ID associated with your request.
	 */
	UniqueTransactionID string
}

// IsSuccess returns true when this delete instrument identifier no content response has a 2xx status code
func (o *DeleteInstrumentIdentifierNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete instrument identifier no content response has a 3xx status code
func (o *DeleteInstrumentIdentifierNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete instrument identifier no content response has a 4xx status code
func (o *DeleteInstrumentIdentifierNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete instrument identifier no content response has a 5xx status code
func (o *DeleteInstrumentIdentifierNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete instrument identifier no content response a status code equal to that given
func (o *DeleteInstrumentIdentifierNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete instrument identifier no content response
func (o *DeleteInstrumentIdentifierNoContent) Code() int {
	return 204
}

func (o *DeleteInstrumentIdentifierNoContent) Error() string {
	return fmt.Sprintf("[DELETE /tms/v1/instrumentidentifiers/{tokenId}][%d] deleteInstrumentIdentifierNoContent ", 204)
}

func (o *DeleteInstrumentIdentifierNoContent) String() string {
	return fmt.Sprintf("[DELETE /tms/v1/instrumentidentifiers/{tokenId}][%d] deleteInstrumentIdentifierNoContent ", 204)
}

func (o *DeleteInstrumentIdentifierNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	return nil
}

// NewDeleteInstrumentIdentifierForbidden creates a DeleteInstrumentIdentifierForbidden with default headers values
func NewDeleteInstrumentIdentifierForbidden() *DeleteInstrumentIdentifierForbidden {
	return &DeleteInstrumentIdentifierForbidden{}
}

/*
DeleteInstrumentIdentifierForbidden describes a response with status code 403, with default header values.

Forbidden. The profile might not have permission to perform the token operation.
*/
type DeleteInstrumentIdentifierForbidden struct {

	/* A globally unique ID associated with your request.
	 */
	UniqueTransactionID string

	Payload []*DeleteInstrumentIdentifierForbiddenBodyItems0
}

// IsSuccess returns true when this delete instrument identifier forbidden response has a 2xx status code
func (o *DeleteInstrumentIdentifierForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete instrument identifier forbidden response has a 3xx status code
func (o *DeleteInstrumentIdentifierForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete instrument identifier forbidden response has a 4xx status code
func (o *DeleteInstrumentIdentifierForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete instrument identifier forbidden response has a 5xx status code
func (o *DeleteInstrumentIdentifierForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete instrument identifier forbidden response a status code equal to that given
func (o *DeleteInstrumentIdentifierForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete instrument identifier forbidden response
func (o *DeleteInstrumentIdentifierForbidden) Code() int {
	return 403
}

func (o *DeleteInstrumentIdentifierForbidden) Error() string {
	return fmt.Sprintf("[DELETE /tms/v1/instrumentidentifiers/{tokenId}][%d] deleteInstrumentIdentifierForbidden  %+v", 403, o.Payload)
}

func (o *DeleteInstrumentIdentifierForbidden) String() string {
	return fmt.Sprintf("[DELETE /tms/v1/instrumentidentifiers/{tokenId}][%d] deleteInstrumentIdentifierForbidden  %+v", 403, o.Payload)
}

func (o *DeleteInstrumentIdentifierForbidden) GetPayload() []*DeleteInstrumentIdentifierForbiddenBodyItems0 {
	return o.Payload
}

func (o *DeleteInstrumentIdentifierForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteInstrumentIdentifierNotFound creates a DeleteInstrumentIdentifierNotFound with default headers values
func NewDeleteInstrumentIdentifierNotFound() *DeleteInstrumentIdentifierNotFound {
	return &DeleteInstrumentIdentifierNotFound{}
}

/*
DeleteInstrumentIdentifierNotFound describes a response with status code 404, with default header values.

Token Not Found. The `tokenid` may not exist or was entered incorrectly.
*/
type DeleteInstrumentIdentifierNotFound struct {

	/* A globally unique ID associated with your request.
	 */
	UniqueTransactionID string

	Payload []*DeleteInstrumentIdentifierNotFoundBodyItems0
}

// IsSuccess returns true when this delete instrument identifier not found response has a 2xx status code
func (o *DeleteInstrumentIdentifierNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete instrument identifier not found response has a 3xx status code
func (o *DeleteInstrumentIdentifierNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete instrument identifier not found response has a 4xx status code
func (o *DeleteInstrumentIdentifierNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete instrument identifier not found response has a 5xx status code
func (o *DeleteInstrumentIdentifierNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete instrument identifier not found response a status code equal to that given
func (o *DeleteInstrumentIdentifierNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete instrument identifier not found response
func (o *DeleteInstrumentIdentifierNotFound) Code() int {
	return 404
}

func (o *DeleteInstrumentIdentifierNotFound) Error() string {
	return fmt.Sprintf("[DELETE /tms/v1/instrumentidentifiers/{tokenId}][%d] deleteInstrumentIdentifierNotFound  %+v", 404, o.Payload)
}

func (o *DeleteInstrumentIdentifierNotFound) String() string {
	return fmt.Sprintf("[DELETE /tms/v1/instrumentidentifiers/{tokenId}][%d] deleteInstrumentIdentifierNotFound  %+v", 404, o.Payload)
}

func (o *DeleteInstrumentIdentifierNotFound) GetPayload() []*DeleteInstrumentIdentifierNotFoundBodyItems0 {
	return o.Payload
}

func (o *DeleteInstrumentIdentifierNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteInstrumentIdentifierConflict creates a DeleteInstrumentIdentifierConflict with default headers values
func NewDeleteInstrumentIdentifierConflict() *DeleteInstrumentIdentifierConflict {
	return &DeleteInstrumentIdentifierConflict{}
}

/*
DeleteInstrumentIdentifierConflict describes a response with status code 409, with default header values.

Conflict. The token is linked to a Payment Instrument.
*/
type DeleteInstrumentIdentifierConflict struct {

	/* A globally unique ID associated with your request.
	 */
	UniqueTransactionID string

	Payload []*DeleteInstrumentIdentifierConflictBodyItems0
}

// IsSuccess returns true when this delete instrument identifier conflict response has a 2xx status code
func (o *DeleteInstrumentIdentifierConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete instrument identifier conflict response has a 3xx status code
func (o *DeleteInstrumentIdentifierConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete instrument identifier conflict response has a 4xx status code
func (o *DeleteInstrumentIdentifierConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete instrument identifier conflict response has a 5xx status code
func (o *DeleteInstrumentIdentifierConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this delete instrument identifier conflict response a status code equal to that given
func (o *DeleteInstrumentIdentifierConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the delete instrument identifier conflict response
func (o *DeleteInstrumentIdentifierConflict) Code() int {
	return 409
}

func (o *DeleteInstrumentIdentifierConflict) Error() string {
	return fmt.Sprintf("[DELETE /tms/v1/instrumentidentifiers/{tokenId}][%d] deleteInstrumentIdentifierConflict  %+v", 409, o.Payload)
}

func (o *DeleteInstrumentIdentifierConflict) String() string {
	return fmt.Sprintf("[DELETE /tms/v1/instrumentidentifiers/{tokenId}][%d] deleteInstrumentIdentifierConflict  %+v", 409, o.Payload)
}

func (o *DeleteInstrumentIdentifierConflict) GetPayload() []*DeleteInstrumentIdentifierConflictBodyItems0 {
	return o.Payload
}

func (o *DeleteInstrumentIdentifierConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteInstrumentIdentifierGone creates a DeleteInstrumentIdentifierGone with default headers values
func NewDeleteInstrumentIdentifierGone() *DeleteInstrumentIdentifierGone {
	return &DeleteInstrumentIdentifierGone{}
}

/*
DeleteInstrumentIdentifierGone describes a response with status code 410, with default header values.

Token Not Available. The token has been deleted.
*/
type DeleteInstrumentIdentifierGone struct {

	/* A globally unique ID associated with your request.
	 */
	UniqueTransactionID string

	Payload []*DeleteInstrumentIdentifierGoneBodyItems0
}

// IsSuccess returns true when this delete instrument identifier gone response has a 2xx status code
func (o *DeleteInstrumentIdentifierGone) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete instrument identifier gone response has a 3xx status code
func (o *DeleteInstrumentIdentifierGone) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete instrument identifier gone response has a 4xx status code
func (o *DeleteInstrumentIdentifierGone) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete instrument identifier gone response has a 5xx status code
func (o *DeleteInstrumentIdentifierGone) IsServerError() bool {
	return false
}

// IsCode returns true when this delete instrument identifier gone response a status code equal to that given
func (o *DeleteInstrumentIdentifierGone) IsCode(code int) bool {
	return code == 410
}

// Code gets the status code for the delete instrument identifier gone response
func (o *DeleteInstrumentIdentifierGone) Code() int {
	return 410
}

func (o *DeleteInstrumentIdentifierGone) Error() string {
	return fmt.Sprintf("[DELETE /tms/v1/instrumentidentifiers/{tokenId}][%d] deleteInstrumentIdentifierGone  %+v", 410, o.Payload)
}

func (o *DeleteInstrumentIdentifierGone) String() string {
	return fmt.Sprintf("[DELETE /tms/v1/instrumentidentifiers/{tokenId}][%d] deleteInstrumentIdentifierGone  %+v", 410, o.Payload)
}

func (o *DeleteInstrumentIdentifierGone) GetPayload() []*DeleteInstrumentIdentifierGoneBodyItems0 {
	return o.Payload
}

func (o *DeleteInstrumentIdentifierGone) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteInstrumentIdentifierFailedDependency creates a DeleteInstrumentIdentifierFailedDependency with default headers values
func NewDeleteInstrumentIdentifierFailedDependency() *DeleteInstrumentIdentifierFailedDependency {
	return &DeleteInstrumentIdentifierFailedDependency{}
}

/*
DeleteInstrumentIdentifierFailedDependency describes a response with status code 424, with default header values.

Failed Dependency: e.g. The profile represented by the profile-id may not exist or the profile-id was entered incorrectly.
*/
type DeleteInstrumentIdentifierFailedDependency struct {

	/* A globally unique id associated with your request.
	 */
	UniqueTransactionID string

	Payload []*DeleteInstrumentIdentifierFailedDependencyBodyItems0
}

// IsSuccess returns true when this delete instrument identifier failed dependency response has a 2xx status code
func (o *DeleteInstrumentIdentifierFailedDependency) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete instrument identifier failed dependency response has a 3xx status code
func (o *DeleteInstrumentIdentifierFailedDependency) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete instrument identifier failed dependency response has a 4xx status code
func (o *DeleteInstrumentIdentifierFailedDependency) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete instrument identifier failed dependency response has a 5xx status code
func (o *DeleteInstrumentIdentifierFailedDependency) IsServerError() bool {
	return false
}

// IsCode returns true when this delete instrument identifier failed dependency response a status code equal to that given
func (o *DeleteInstrumentIdentifierFailedDependency) IsCode(code int) bool {
	return code == 424
}

// Code gets the status code for the delete instrument identifier failed dependency response
func (o *DeleteInstrumentIdentifierFailedDependency) Code() int {
	return 424
}

func (o *DeleteInstrumentIdentifierFailedDependency) Error() string {
	return fmt.Sprintf("[DELETE /tms/v1/instrumentidentifiers/{tokenId}][%d] deleteInstrumentIdentifierFailedDependency  %+v", 424, o.Payload)
}

func (o *DeleteInstrumentIdentifierFailedDependency) String() string {
	return fmt.Sprintf("[DELETE /tms/v1/instrumentidentifiers/{tokenId}][%d] deleteInstrumentIdentifierFailedDependency  %+v", 424, o.Payload)
}

func (o *DeleteInstrumentIdentifierFailedDependency) GetPayload() []*DeleteInstrumentIdentifierFailedDependencyBodyItems0 {
	return o.Payload
}

func (o *DeleteInstrumentIdentifierFailedDependency) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteInstrumentIdentifierInternalServerError creates a DeleteInstrumentIdentifierInternalServerError with default headers values
func NewDeleteInstrumentIdentifierInternalServerError() *DeleteInstrumentIdentifierInternalServerError {
	return &DeleteInstrumentIdentifierInternalServerError{}
}

/*
DeleteInstrumentIdentifierInternalServerError describes a response with status code 500, with default header values.

Unexpected error.
*/
type DeleteInstrumentIdentifierInternalServerError struct {

	/* A globally unique id associated with your request.
	 */
	UniqueTransactionID string

	Payload []*DeleteInstrumentIdentifierInternalServerErrorBodyItems0
}

// IsSuccess returns true when this delete instrument identifier internal server error response has a 2xx status code
func (o *DeleteInstrumentIdentifierInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete instrument identifier internal server error response has a 3xx status code
func (o *DeleteInstrumentIdentifierInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete instrument identifier internal server error response has a 4xx status code
func (o *DeleteInstrumentIdentifierInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete instrument identifier internal server error response has a 5xx status code
func (o *DeleteInstrumentIdentifierInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete instrument identifier internal server error response a status code equal to that given
func (o *DeleteInstrumentIdentifierInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete instrument identifier internal server error response
func (o *DeleteInstrumentIdentifierInternalServerError) Code() int {
	return 500
}

func (o *DeleteInstrumentIdentifierInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /tms/v1/instrumentidentifiers/{tokenId}][%d] deleteInstrumentIdentifierInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteInstrumentIdentifierInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /tms/v1/instrumentidentifiers/{tokenId}][%d] deleteInstrumentIdentifierInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteInstrumentIdentifierInternalServerError) GetPayload() []*DeleteInstrumentIdentifierInternalServerErrorBodyItems0 {
	return o.Payload
}

func (o *DeleteInstrumentIdentifierInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header uniqueTransactionID
	hdrUniqueTransactionID := response.GetHeader("uniqueTransactionID")

	if hdrUniqueTransactionID != "" {
		o.UniqueTransactionID = hdrUniqueTransactionID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
DeleteInstrumentIdentifierConflictBodyItems0 delete instrument identifier conflict body items0
swagger:model DeleteInstrumentIdentifierConflictBodyItems0
*/
type DeleteInstrumentIdentifierConflictBodyItems0 struct {

	// details
	Details *DeleteInstrumentIdentifierConflictBodyItems0Details `json:"details,omitempty"`

	// The detailed message related to the type stated above.
	Message string `json:"message,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this delete instrument identifier conflict body items0
func (o *DeleteInstrumentIdentifierConflictBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteInstrumentIdentifierConflictBodyItems0) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	if o.Details != nil {
		if err := o.Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this delete instrument identifier conflict body items0 based on the context it is used
func (o *DeleteInstrumentIdentifierConflictBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteInstrumentIdentifierConflictBodyItems0) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	if o.Details != nil {

		if swag.IsZero(o.Details) { // not required
			return nil
		}

		if err := o.Details.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierConflictBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierConflictBodyItems0) UnmarshalBinary(b []byte) error {
	var res DeleteInstrumentIdentifierConflictBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteInstrumentIdentifierConflictBodyItems0Details delete instrument identifier conflict body items0 details
swagger:model DeleteInstrumentIdentifierConflictBodyItems0Details
*/
type DeleteInstrumentIdentifierConflictBodyItems0Details struct {

	// The location of the field that threw the error.
	Location string `json:"location,omitempty"`

	// The name of the field that threw the error.
	Name string `json:"name,omitempty"`
}

// Validate validates this delete instrument identifier conflict body items0 details
func (o *DeleteInstrumentIdentifierConflictBodyItems0Details) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delete instrument identifier conflict body items0 details based on context it is used
func (o *DeleteInstrumentIdentifierConflictBodyItems0Details) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierConflictBodyItems0Details) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierConflictBodyItems0Details) UnmarshalBinary(b []byte) error {
	var res DeleteInstrumentIdentifierConflictBodyItems0Details
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteInstrumentIdentifierConflictBodyLinks delete instrument identifier conflict body links
swagger:model DeleteInstrumentIdentifierConflictBodyLinks
*/
type DeleteInstrumentIdentifierConflictBodyLinks struct {

	// payment instruments
	PaymentInstruments *DeleteInstrumentIdentifierConflictBodyLinksPaymentInstruments `json:"paymentInstruments,omitempty"`
}

// Validate validates this delete instrument identifier conflict body links
func (o *DeleteInstrumentIdentifierConflictBodyLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePaymentInstruments(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteInstrumentIdentifierConflictBodyLinks) validatePaymentInstruments(formats strfmt.Registry) error {
	if swag.IsZero(o.PaymentInstruments) { // not required
		return nil
	}

	if o.PaymentInstruments != nil {
		if err := o.PaymentInstruments.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deleteInstrumentIdentifierConflict" + "." + "_links" + "." + "paymentInstruments")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deleteInstrumentIdentifierConflict" + "." + "_links" + "." + "paymentInstruments")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this delete instrument identifier conflict body links based on the context it is used
func (o *DeleteInstrumentIdentifierConflictBodyLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePaymentInstruments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteInstrumentIdentifierConflictBodyLinks) contextValidatePaymentInstruments(ctx context.Context, formats strfmt.Registry) error {

	if o.PaymentInstruments != nil {

		if swag.IsZero(o.PaymentInstruments) { // not required
			return nil
		}

		if err := o.PaymentInstruments.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deleteInstrumentIdentifierConflict" + "." + "_links" + "." + "paymentInstruments")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deleteInstrumentIdentifierConflict" + "." + "_links" + "." + "paymentInstruments")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierConflictBodyLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierConflictBodyLinks) UnmarshalBinary(b []byte) error {
	var res DeleteInstrumentIdentifierConflictBodyLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteInstrumentIdentifierConflictBodyLinksPaymentInstruments delete instrument identifier conflict body links payment instruments
swagger:model DeleteInstrumentIdentifierConflictBodyLinksPaymentInstruments
*/
type DeleteInstrumentIdentifierConflictBodyLinksPaymentInstruments struct {

	// href
	// Example: https://api.cybersource.com/tms/v1/instrumentidentifiers/1234567890123456789/paymentinstruments
	Href string `json:"href,omitempty"`
}

// Validate validates this delete instrument identifier conflict body links payment instruments
func (o *DeleteInstrumentIdentifierConflictBodyLinksPaymentInstruments) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delete instrument identifier conflict body links payment instruments based on context it is used
func (o *DeleteInstrumentIdentifierConflictBodyLinksPaymentInstruments) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierConflictBodyLinksPaymentInstruments) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierConflictBodyLinksPaymentInstruments) UnmarshalBinary(b []byte) error {
	var res DeleteInstrumentIdentifierConflictBodyLinksPaymentInstruments
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteInstrumentIdentifierFailedDependencyBodyItems0 delete instrument identifier failed dependency body items0
swagger:model DeleteInstrumentIdentifierFailedDependencyBodyItems0
*/
type DeleteInstrumentIdentifierFailedDependencyBodyItems0 struct {

	// details
	Details *DeleteInstrumentIdentifierFailedDependencyBodyItems0Details `json:"details,omitempty"`

	// The detailed message related to the type stated above.
	Message string `json:"message,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this delete instrument identifier failed dependency body items0
func (o *DeleteInstrumentIdentifierFailedDependencyBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteInstrumentIdentifierFailedDependencyBodyItems0) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	if o.Details != nil {
		if err := o.Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this delete instrument identifier failed dependency body items0 based on the context it is used
func (o *DeleteInstrumentIdentifierFailedDependencyBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteInstrumentIdentifierFailedDependencyBodyItems0) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	if o.Details != nil {

		if swag.IsZero(o.Details) { // not required
			return nil
		}

		if err := o.Details.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierFailedDependencyBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierFailedDependencyBodyItems0) UnmarshalBinary(b []byte) error {
	var res DeleteInstrumentIdentifierFailedDependencyBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteInstrumentIdentifierFailedDependencyBodyItems0Details delete instrument identifier failed dependency body items0 details
swagger:model DeleteInstrumentIdentifierFailedDependencyBodyItems0Details
*/
type DeleteInstrumentIdentifierFailedDependencyBodyItems0Details struct {

	// The location of the field that threw the error.
	Location string `json:"location,omitempty"`

	// The name of the field that threw the error.
	Name string `json:"name,omitempty"`
}

// Validate validates this delete instrument identifier failed dependency body items0 details
func (o *DeleteInstrumentIdentifierFailedDependencyBodyItems0Details) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delete instrument identifier failed dependency body items0 details based on context it is used
func (o *DeleteInstrumentIdentifierFailedDependencyBodyItems0Details) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierFailedDependencyBodyItems0Details) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierFailedDependencyBodyItems0Details) UnmarshalBinary(b []byte) error {
	var res DeleteInstrumentIdentifierFailedDependencyBodyItems0Details
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteInstrumentIdentifierForbiddenBodyItems0 delete instrument identifier forbidden body items0
swagger:model DeleteInstrumentIdentifierForbiddenBodyItems0
*/
type DeleteInstrumentIdentifierForbiddenBodyItems0 struct {

	// details
	Details *DeleteInstrumentIdentifierForbiddenBodyItems0Details `json:"details,omitempty"`

	// The detailed message related to the type stated above.
	Message string `json:"message,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this delete instrument identifier forbidden body items0
func (o *DeleteInstrumentIdentifierForbiddenBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteInstrumentIdentifierForbiddenBodyItems0) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	if o.Details != nil {
		if err := o.Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this delete instrument identifier forbidden body items0 based on the context it is used
func (o *DeleteInstrumentIdentifierForbiddenBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteInstrumentIdentifierForbiddenBodyItems0) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	if o.Details != nil {

		if swag.IsZero(o.Details) { // not required
			return nil
		}

		if err := o.Details.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierForbiddenBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierForbiddenBodyItems0) UnmarshalBinary(b []byte) error {
	var res DeleteInstrumentIdentifierForbiddenBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteInstrumentIdentifierForbiddenBodyItems0Details delete instrument identifier forbidden body items0 details
swagger:model DeleteInstrumentIdentifierForbiddenBodyItems0Details
*/
type DeleteInstrumentIdentifierForbiddenBodyItems0Details struct {

	// The location of the field that threw the error.
	Location string `json:"location,omitempty"`

	// The name of the field that threw the error.
	Name string `json:"name,omitempty"`
}

// Validate validates this delete instrument identifier forbidden body items0 details
func (o *DeleteInstrumentIdentifierForbiddenBodyItems0Details) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delete instrument identifier forbidden body items0 details based on context it is used
func (o *DeleteInstrumentIdentifierForbiddenBodyItems0Details) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierForbiddenBodyItems0Details) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierForbiddenBodyItems0Details) UnmarshalBinary(b []byte) error {
	var res DeleteInstrumentIdentifierForbiddenBodyItems0Details
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteInstrumentIdentifierGoneBodyItems0 delete instrument identifier gone body items0
swagger:model DeleteInstrumentIdentifierGoneBodyItems0
*/
type DeleteInstrumentIdentifierGoneBodyItems0 struct {

	// details
	Details *DeleteInstrumentIdentifierGoneBodyItems0Details `json:"details,omitempty"`

	// The detailed message related to the type stated above.
	Message string `json:"message,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this delete instrument identifier gone body items0
func (o *DeleteInstrumentIdentifierGoneBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteInstrumentIdentifierGoneBodyItems0) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	if o.Details != nil {
		if err := o.Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this delete instrument identifier gone body items0 based on the context it is used
func (o *DeleteInstrumentIdentifierGoneBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteInstrumentIdentifierGoneBodyItems0) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	if o.Details != nil {

		if swag.IsZero(o.Details) { // not required
			return nil
		}

		if err := o.Details.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierGoneBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierGoneBodyItems0) UnmarshalBinary(b []byte) error {
	var res DeleteInstrumentIdentifierGoneBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteInstrumentIdentifierGoneBodyItems0Details delete instrument identifier gone body items0 details
swagger:model DeleteInstrumentIdentifierGoneBodyItems0Details
*/
type DeleteInstrumentIdentifierGoneBodyItems0Details struct {

	// The location of the field that threw the error.
	Location string `json:"location,omitempty"`

	// The name of the field that threw the error.
	Name string `json:"name,omitempty"`
}

// Validate validates this delete instrument identifier gone body items0 details
func (o *DeleteInstrumentIdentifierGoneBodyItems0Details) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delete instrument identifier gone body items0 details based on context it is used
func (o *DeleteInstrumentIdentifierGoneBodyItems0Details) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierGoneBodyItems0Details) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierGoneBodyItems0Details) UnmarshalBinary(b []byte) error {
	var res DeleteInstrumentIdentifierGoneBodyItems0Details
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteInstrumentIdentifierInternalServerErrorBodyItems0 delete instrument identifier internal server error body items0
swagger:model DeleteInstrumentIdentifierInternalServerErrorBodyItems0
*/
type DeleteInstrumentIdentifierInternalServerErrorBodyItems0 struct {

	// details
	Details *DeleteInstrumentIdentifierInternalServerErrorBodyItems0Details `json:"details,omitempty"`

	// The detailed message related to the type stated above.
	Message string `json:"message,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this delete instrument identifier internal server error body items0
func (o *DeleteInstrumentIdentifierInternalServerErrorBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteInstrumentIdentifierInternalServerErrorBodyItems0) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	if o.Details != nil {
		if err := o.Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this delete instrument identifier internal server error body items0 based on the context it is used
func (o *DeleteInstrumentIdentifierInternalServerErrorBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteInstrumentIdentifierInternalServerErrorBodyItems0) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	if o.Details != nil {

		if swag.IsZero(o.Details) { // not required
			return nil
		}

		if err := o.Details.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierInternalServerErrorBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierInternalServerErrorBodyItems0) UnmarshalBinary(b []byte) error {
	var res DeleteInstrumentIdentifierInternalServerErrorBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteInstrumentIdentifierInternalServerErrorBodyItems0Details delete instrument identifier internal server error body items0 details
swagger:model DeleteInstrumentIdentifierInternalServerErrorBodyItems0Details
*/
type DeleteInstrumentIdentifierInternalServerErrorBodyItems0Details struct {

	// The location of the field that threw the error.
	Location string `json:"location,omitempty"`

	// The name of the field that threw the error.
	Name string `json:"name,omitempty"`
}

// Validate validates this delete instrument identifier internal server error body items0 details
func (o *DeleteInstrumentIdentifierInternalServerErrorBodyItems0Details) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delete instrument identifier internal server error body items0 details based on context it is used
func (o *DeleteInstrumentIdentifierInternalServerErrorBodyItems0Details) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierInternalServerErrorBodyItems0Details) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierInternalServerErrorBodyItems0Details) UnmarshalBinary(b []byte) error {
	var res DeleteInstrumentIdentifierInternalServerErrorBodyItems0Details
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteInstrumentIdentifierNotFoundBodyItems0 delete instrument identifier not found body items0
swagger:model DeleteInstrumentIdentifierNotFoundBodyItems0
*/
type DeleteInstrumentIdentifierNotFoundBodyItems0 struct {

	// details
	Details *DeleteInstrumentIdentifierNotFoundBodyItems0Details `json:"details,omitempty"`

	// The detailed message related to the type stated above.
	Message string `json:"message,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this delete instrument identifier not found body items0
func (o *DeleteInstrumentIdentifierNotFoundBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteInstrumentIdentifierNotFoundBodyItems0) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	if o.Details != nil {
		if err := o.Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this delete instrument identifier not found body items0 based on the context it is used
func (o *DeleteInstrumentIdentifierNotFoundBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteInstrumentIdentifierNotFoundBodyItems0) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	if o.Details != nil {

		if swag.IsZero(o.Details) { // not required
			return nil
		}

		if err := o.Details.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierNotFoundBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierNotFoundBodyItems0) UnmarshalBinary(b []byte) error {
	var res DeleteInstrumentIdentifierNotFoundBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
DeleteInstrumentIdentifierNotFoundBodyItems0Details delete instrument identifier not found body items0 details
swagger:model DeleteInstrumentIdentifierNotFoundBodyItems0Details
*/
type DeleteInstrumentIdentifierNotFoundBodyItems0Details struct {

	// The location of the field that threw the error.
	Location string `json:"location,omitempty"`

	// The name of the field that threw the error.
	Name string `json:"name,omitempty"`
}

// Validate validates this delete instrument identifier not found body items0 details
func (o *DeleteInstrumentIdentifierNotFoundBodyItems0Details) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delete instrument identifier not found body items0 details based on context it is used
func (o *DeleteInstrumentIdentifierNotFoundBodyItems0Details) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierNotFoundBodyItems0Details) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierNotFoundBodyItems0Details) UnmarshalBinary(b []byte) error {
	var res DeleteInstrumentIdentifierNotFoundBodyItems0Details
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
