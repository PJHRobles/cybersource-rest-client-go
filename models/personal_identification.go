// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PersonalIdentification personal identification
//
// swagger:model PersonalIdentification
type PersonalIdentification struct {

	// Customer's identification number.
	//
	// **Important**:
	// Contact your TeleCheck representative to learn whether this field is required or optional.
	//
	// Example: 1234567890
	ID string `json:"id,omitempty"`

	// issued by
	IssuedBy *PersonalIdentificationIssuedBy `json:"issuedBy,omitempty"`

	// Type of personal identification.
	// **Important**:
	// Contact your TeleCheck representative to learn whether this field is required or optional.
	//
	// Valid values:
	// - driver license
	//
	// Example: driver license
	Type string `json:"type,omitempty"`
}

// Validate validates this personal identification
func (m *PersonalIdentification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIssuedBy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PersonalIdentification) validateIssuedBy(formats strfmt.Registry) error {
	if swag.IsZero(m.IssuedBy) { // not required
		return nil
	}

	if m.IssuedBy != nil {
		if err := m.IssuedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("issuedBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("issuedBy")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this personal identification based on the context it is used
func (m *PersonalIdentification) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIssuedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PersonalIdentification) contextValidateIssuedBy(ctx context.Context, formats strfmt.Registry) error {

	if m.IssuedBy != nil {

		if swag.IsZero(m.IssuedBy) { // not required
			return nil
		}

		if err := m.IssuedBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("issuedBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("issuedBy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PersonalIdentification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PersonalIdentification) UnmarshalBinary(b []byte) error {
	var res PersonalIdentification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PersonalIdentificationIssuedBy personal identification issued by
//
// swagger:model PersonalIdentificationIssuedBy
type PersonalIdentificationIssuedBy struct {

	// State or province in which the customer’s driver’s license was issued. Use the State, Province, and Territory Codes for the United States and Canada.
	//
	// **Important**:
	// Contact your TeleCheck representative to learn whether this field is required or optional.
	//
	// Example: CA
	AdministrativeArea string `json:"administrativeArea,omitempty"`
}

// Validate validates this personal identification issued by
func (m *PersonalIdentificationIssuedBy) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this personal identification issued by based on context it is used
func (m *PersonalIdentificationIssuedBy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PersonalIdentificationIssuedBy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PersonalIdentificationIssuedBy) UnmarshalBinary(b []byte) error {
	var res PersonalIdentificationIssuedBy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
